// Scans public/photos/*/* and writes lib/galleries.manifest.ts
import { promises as fs } from "fs";
import path from "path";

const CATEGORIES = ["people", "landscapes", "animals"];
const ROOT = process.cwd();
const PHOTOS_DIR = path.join(ROOT, "public", "photos");
const OUT = path.join(ROOT, "lib", "galleries.manifest.ts");

const toTitle = (slug) =>
  slug.replace(/[-_]+/g, " ").replace(/\b\w/g, (c) => c.toUpperCase());

const buildAlt = (file, title) =>
  `${title}: ` + file.replace(/\.[^/.]+$/, "").replace(/[-_]+/g, " ");

async function build() {
  const galleries = [];

  for (const cat of CATEGORIES) {
    const catDir = path.join(PHOTOS_DIR, cat);
    let entries = [];
    try {
      entries = await fs.readdir(catDir, { withFileTypes: true });
    } catch {
      continue; // category folder might not exist yet
    }

    for (const dirent of entries) {
      if (!dirent.isDirectory()) continue;

      const slug = dirent.name;
      const galleryDir = path.join(catDir, slug);

      const files = (await fs.readdir(galleryDir))
        .filter((f) => /\.(jpe?g|png|webp)$/i.test(f))
        .sort();

      if (files.length === 0) continue;

      const heroName = files.find((f) => /^hero\./i.test(f)) || files[0];
      const others = files.filter((f) => f !== heroName);

      // Use latest file modified time as the gallery date
      const mtimes = await Promise.all(
        files.map((f) =>
          fs.stat(path.join(galleryDir, f)).then((s) => s.mtimeMs).catch(() => 0)
        )
      );
      const dateISO = new Date(Math.max(...mtimes)).toISOString().slice(0, 10);

      const title = toTitle(slug);

      const hero = {
        src: `/photos/${cat}/${slug}/${heroName}`,
        alt: `${title} — hero`,
      };

      const images = others.map((f) => ({
        src: `/photos/${cat}/${slug}/${f}`,
        alt: buildAlt(f, title),
        meta: { camera: "", settings: "" },
      }));

      galleries.push({
        slug,
        title,
        date: dateISO,
        location: "—",
        category: cat,
        hero,
        images,
      });
    }
  }

  const file = `// AUTO-GENERATED by scripts/buildGalleryManifest.mjs — do not edit by hand
export const generatedGalleries = ${JSON.stringify(galleries, null, 2)};
`;
  await fs.writeFile(OUT, file, "utf8");
  console.log(`Wrote ${OUT} with ${galleries.length} galleries.\n`);
}

build().catch((err) => {
  console.error(err);
  process.exit(1);
});
